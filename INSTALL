Sguil should be installed in the following order:

Step 1: Install mysql and create the sguil database.
Step 2: Install the GUI server (sguild).
Step 3: Install the GUI client (sguil.tk).
Step 4: Install the sensor.
Step 5: Install xscriptd.

NOTE: Everything can be installed on a single system,
or the different services can be split up between 
different systems. For instance, snort and barnyard
can be installed on one sytem (the sensor), the GUI
server and xscriptd on another system, the database
on yet another system, and the client could be ran
on a number of different systems. The configuration
is flexible and the number of systems required depends
on the resources needed. Large networks will benefit
by splitting the different processes up on different
sytems, while a home user should easily be able to
run everything on a single system.

######################################################
#Step 1: Install mysql and create the sguil database.#
######################################################

Install mysql (http:www.mysql.com) per its installation
instructions. 

Create the sguildb:
  Bamm@syn# mysql -u root -p -e "CREATE DATABASE sguildb"
Make sure each sensor has INSERT and SELECT privledges:
  Bamm@syn# mysql -u root -p -e "GRANT INSERT,SELECT on sguildb.* to root@<sensorip>"
Build the required tables:
  Bamm@syn# mysql -u root -p -D sguildb < ./scripts/create_sguildb.sql
  *NOTE: Verify all is well with: mysql -u root -p -e "show tables"
  +-------------------+
  | Tables_in_sguildb |
  +-------------------+
  | data              |
  | event             |
  | icmphdr           |
  | portscan          |
  | sensor            |
  | tcphdr            |
  | udphdr            |
  +-------------------+

##########################################
#Step 2: Install the GUI server (sguild).#
##########################################
Sguild is a tcl script and I would recommend using tcl-8.3
or better. I haven't had time to test lesser versions but
they may work. Sguild requires mysqltcl support and it can
be downloaded from http://www.xdobry.de/mysqltcl/. Once
installed, test that it can be loaded by invoking the tcl
interpreter (ie /usr/bin/tcl or /usr/local/bin/tclsh8.3)
and adding the package:
  tcl> package require mysqltcl
  tcl>
If you receive no errors than all is good.

Now edit sguild so the first line contains the correct path to
the tcl interpreter (ie *!/usr/bin/tcl or #!/usr/local/bin/tclsh8.3).
Then configure options at the beginning of the script. Pay particular
attention to the PATH you define for sguild to look for snort rules.
In the future, rules will be localized in the DB, for now each rule
file must be kept on the sguild server based on the hostname. Don't
forget to copy these rule files over after installing the sensor.
Finally, start the daemon, it will send a query to the DB to get
any archived alerts and then echo "Waiting for events from sensors."


############################################
#Step 3: Install the GUI client (sguil.tk).#
############################################
Sguil.tk is a tcl/tk script. It requires tcl/tk 8.3 (I haven't tested
lesser versions, they may work), tclx 8.3 (I have heard that
some distros package tclx with the standard tcl libs), and incr tcl (itcl)
3.2 (including the iwidgets 2.2 set - see http://www.tcltk.com/iwidgets/
for more info).

Edit sguil.tk, change the first line to reflect the actual location of wish.
It could be #!/usr/bin/wishx or #!/usr/local/bin/wish or #!/usr/local/bin/wish8.3

(FYI: On OpenBSD you may need to add the line:
  load /usr/local/lib/libmysqltcl.so.0.0
prior to the line:
  package require mysqltcl
in order for the tcl/tk interpreter to find the package.)

On startup, sguil.tk reads the options in sguil.conf. If a path to
the sguil.conf file is not provided, it will look in the current dir
and /etc/sguil/sguil.conf by default. To specify the location for
the sguil.conf, start sguil.tk like so:
  Bamm@syn# ./sguil.tk -- -c <path>/sguil.conf
Explanations for the different options are within the default conf file.

Along with the config file, sguil.tk will also read $HOME/.sguilrc for
font information if it exists. Anytime you change the default font in
sguil.tk, it will write your new preferences to .sguilrc.


#############################
#Step 4: Install the sensor.#
#############################
A. Begin by installing snort -
  Download the source for snort from http://www.snort.org/dl (sguil has only
  been tested with version 1.9). Untar the package, change to the preprocessors
  directory, and make a back up of the portsan preprocessor:
    Bamm@syn# cd src/preprocessors
    Bamm@syn# cp spp_portscan.c spp_portscan.c.bak
  Next copy the modified spp_portscan from the sguil source tree to the snort
  source tree:
    Bamm@syn# cp <sguil-src>/snort_mods/spp_portscan .
  Then, compile and install snort as normal.
  Finally, configure snort to use the new portscan preprocessor and the
  log_unified output plugin:
    # Format for the portscan mod is:
    # preprocessor portscan: $HOME_NET <ports> <secs> <logdir> <hostname>
    #   <logdir> must exists and will be read by portscan_loader.tcl
    preprocessor portscan: $HOME_NET 4 3 /snort_data/portscans syn
    output log_unified: filename snort.log, limit 128
  Make sure all the config files for snort are copied to the appropriate
  directory (ie /etc/snort). 
    Bamm@syn# ls /etc/snort/
    gen-msg.map snort.conf classification.config reference.config sid-msg.map
  Start snort:
    Bamm@syn# snort -l /snort_data -c /etc/snort/snort.conf -D
  *NOTE: I use a seperate partition /snort_data to do all my logging.

B. Next install and start the tcl script portscan_loader.sh from the sguil/scripts
directory. Make sure to point the script to the correct interpreter
(i.e. #!/usr/bin/tcl or #!/usr/local/bin/tclsh8.3) and to configure the
options correctly. 


C. Now install Barnyard -
  Download the source for barnyard from http://www.snort.org/dl/barnyard. Untar
  the package and add the op_sguil plugin (op_sguil is a modifed op_acid_db
  plugin. Sorry Andrew, I really didn't mean to mangle your code that bad).
    Bamm@syn# cd src/output-plugins
    Bamm@syn# cp <sguil-src>/barnyard_mods/op_sguil.* .
  Next run configure, and enable mysql support for barnyard it the root of the 
  source tree. (Use the "with" flags if your mysql libs are in a non-standard
  location.)
    Bamm@syn# cd <barnyard-src>
    Bamm@syn# ./configure --enable-mysql
  Then cd back into the output-plugins directory, edit the Makefile, and build
  the object files. This prevents the hand edited Makefile from being over-
  written during compilation.
    Bamm@syn# cd src/output-plugins
    Bamm@syn# vi Makefile
      Edit the file and append the following to the below variable definitions.
        libop_a_SOURCES = <blah> op_sguil.c op_sguil.h
        libop_a_OBJECTS = <blah> op_sguil.o
    Bamm@syn# vi op_plugbase.c
      Edit the file like so:
	~line 26:
           #ifdef ENABLE_MYSQL
           #include "op_acid_db.h"
           #include "op_sguil.h"
           #endif
        ~line 47:
           #ifdef ENABLE_MYSQL
             AcidDbOpInit();
             SguilOpInit();
           #endif
    Bamm@syn# make
    Bamm@syn# cd ../..; make
  Barnyard should now be built and can be installed where you prefer.
  Edit the barnyard.conf and add the following line to use the sguil plugin:
    output sguil: mysql, sensor_id 0, database sguildb, server syn, user root,\
    password dbpasswd, sguild_host syn, sguild_port 7736
  Start Barnyard:
    Bamm@syn# /usr/local/bin/barnyard -c /etc/snort/barnyard.conf -d /var/log/snort\
    -g /etc/snort/gen-msg.map -s /etc/snort/sid-msg.map -f snort.log -w /etc/snort/waldo.file


###########################
#Step 5: Install xscriptd.#
###########################
Xscriptd is meant to be ran on the same system as sguild. Its purpose is
get binary packet data from sensor(s) and generate a transcript using tcpflow
or forward the binary file to the client to be loaded into ethereal. 

The script log_packets.sh is used to log the binary data. It is located 
in the ./scripts directory and should be ran on the sensor.  Edit the
configurations, start the script (./log_packets.sh start), and then
add an entry to the crontab to restart the script every hour (you can change
the interval based on your requirements):
  # Crontab example
  00 0-23/1 * * * /usr/local/bin/log_packets.sh restart

Setting up xscriptd on a "local" system (one where snort, barnyard, sguild, and
xscriptd are all run on the same system) is fairly simple. Edit the options
at the beginning of xscriptd (don't for get to specify the correct path to
the tcl interpreter) and make sure that the LOCALSENSOR var is set to "1".

Configuring a "remote" system is a little harder. Xscriptd uses ssh and scp to
retrieve files file the remote sensor. In order for this process to work, it
needs access to a valid ssh identy file that requires no passphrase. Follow these
steps to create one:
  #Shown using dsa
  Bamm@syn# ssh-keygen -t dsa
  Generating public/private dsa key pair.
  Enter file in which to save the key (/root/.ssh/id_dsa): 
  Enter passphrase (empty for no passphrase): <Press Return Here> 
  Enter same passphrase again: <Return again, we want an empty passphrase>
  Your identification has been saved in /root/.ssh/id_dsa.
  Your public key has been saved in /root/.ssh/id_dsa.pub.
  The key fingerprint is:
  7f:39:32:c4:74:d7:f9:55:ad:a0:d3:d3:ba:2d:ba:45 drea@syn.bamm.net

Now append the public key (id_dsa.pub) to the .ssh/authorized_keys2 file on the remote
sensor. You must now ssh to the remote sensor and make sure that the user that
xscriptd will run as can log in without any interaction. You may have to specify
a path to the private identity file (id_dsa). If so, make sure you modify the options
in xscriptd to reflect this:
  # Path to different execs here. If you need to send flags then put them here also
  # set SSH "/usr/bin/ssh -p 1234"
  set SSH "/usr/bin/ssh -i /root/.ssh/sensor_key_id_dsa"
  set SCP "/usr/bin/scp" -i /root/.ssh/sensor_key_id_dsa"


############
#   DONE!  #
############
Read the USAGE for information about using the GUI.

Bammkkkk

