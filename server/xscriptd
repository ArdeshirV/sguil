#!/usr/bin/tcl

set SERVERPORT 7735
# sguild and xscriptd should be ran on the same system.
# If you run these servers on the sensor then set LOCALSENSOR
# to 1. xscriptd will then look for a local "remote" directory.
# Set LOCALSENSOR to 0 if the sensor is on a remote machine. xscriptd
# will then use ssh to get the data back here. Read the INSTALL for more
# info about setting ssh up correctly.
set LOCALSENSOR 0
# 1=on 0=off DEBUG is very chatty.
set DEBUG 1
# Where you want to archive raw file locally when xscripts are requested.
set LOCAL_LOG_DIR /snort_data/archive
# Where xscriptd can find the remote raw files
set REMOTE_LOG_DIR /snort_data/dailylogs
# Path to different execs here. If you need to send flags then put them here also
# set SSH "/usr/bin/ssh -p 1234"
# NOTE: You only need these if you are using remote sensors (ie LOCALSENSOR=0)
set SSH "/usr/bin/ssh"
set SCP "/usr/bin/scp"
# If LOCALSENSOR is 0 then TCPDUMP needs to be the path to TCPDUMP on the sensor.
set TCPDUMP "/usr/sbin/tcpdump"
# http://www.circlemud.org/~jelson/software/tcpflow/
set TCPFLOW "/usr/bin/tcpflow -c"

#################### PROCS ######################

proc GetRawDataFromLocal { timestamp srcIP srcPort dstIP dstPort sensorDir rawDataFileName {socketID {NONE} } } {
  global LOCAL_LOG_DIR REMOTE_LOG_DIR DEBUG TCPDUMP
  set date [lindex $timestamp 0]
  if {$socketID != "NONE"} { puts $socketID "DEBUG"}
  if { [file exists $REMOTE_LOG_DIR/$date] && [file isdirectory $REMOTE_LOG_DIR/$date] } { 
    if {$DEBUG} {puts "Making a list of local log files"}
    if {$socketID != "NONE"} {puts "Making a list of local log files."}
    if {$socketID != "NONE"} {puts "Looking in $REMOTE_LOG_DIR/$date."}
    if {$DEBUG} {puts "Looking in $REMOTE_LOG_DIR/$date"}
  } else {
    if {$socketID != "NONE"} {puts $socketID "$REMOTE_LOG_DIR/$date does not exist. Make sure log_packets.sh is configured correctly."}
    if {$DEBUG} {puts "No matching log files."}
    return error
  }
  cd $REMOTE_LOG_DIR/$date
  if {$DEBUG} {puts $REMOTE_LOG_DIR/$date}
  if {$socketID != "NONE"} { puts $socketID "Making a list of local log files in $REMOTE_LOG_DIR/$date."}
  foreach logFile [glob -nocomplain snort.log.*] {
    lappend logFileTimes [lindex [split $logFile .] 2]
  }
  if { ! [info exists logFileTimes] } {
    if {$DEBUG} {puts "No matching log files."}
    if {$socketID != "NONE"} { puts $socketID "No matching log files."}
    return error
  }
  set sLogFileTimes [lsort -decreasing $logFileTimes]
  if {$DEBUG} {puts $sLogFileTimes}
  if {$socketID != "NONE"} { 
    puts $socketID "Available log files:"
    puts $socketID "$sLogFileTimes"
  }
  set eventTime [clock scan $timestamp -gmt true]
  # The first file we find with a time >= to ours should have our packets.
  foreach logFileTime $sLogFileTimes {
    if { $eventTime >= $logFileTime } {
      set logFileName "snort.log.$logFileTime"
      break
    }
  }
  if { ![info exists logFileName] } {
    return error
  }
  if {$DEBUG} { puts "Creating unique data file." }
  if {$socketID != "NONE"} { puts $socketID "Creating unique data file." }
  set tcpdumpFilter "host $srcIP and host $dstIP and port $srcPort and port $dstPort"
  exec $TCPDUMP -r $REMOTE_LOG_DIR/$date/$logFileName -w $sensorDir/$rawDataFileName $tcpdumpFilter
  return $sensorDir/$rawDataFileName
}
proc GetRawDataFromSensor { sensor timestamp srcIP srcPort dstIP dstPort sensorDir rawDataFileName {socketID {NONE} } } {
  global LOCAL_LOG_DIR REMOTE_LOG_DIR SSH SCP TCPDUMP DEBUG
  set date [lindex $timestamp 0]
  if {$DEBUG} {puts "Getting a list of raw data files from $sensor."}
  if {$socketID != "NONE"} { 
    puts $socketID "DEBUG"
    puts $socketID "Getting a list of raw data files from $sensor."
  }
  if {$DEBUG} {puts "Looking on $sensor in $REMOTE_LOG_DIR/$date."}
  if {$socketID != "NONE"} { puts $socketID "Looking on $sensor in $REMOTE_LOG_DIR/$date."}
  # First we need to get a list of raw data files on the sensor so we can
  # determine what file to pull the data from. For now we are using ssh to
  # do this. Logfiles are in the format of snort.log.unixtime.
  set sshID [open "| $SSH -v $sensor cd $REMOTE_LOG_DIR/$date; ls snort.log.*" r]
  if {$socketID != "NONE"} { puts $socketID "Remote log files:" }
  while { [gets $sshID data] >= 0 } {
    if {$DEBUG} {puts $data}
    if {$socketID != "NONE"} { puts $socketID $data}
    lappend logFileTimes [lindex [split $data .] 2]
  }
  catch {close $sshID} closeError
  if { ! [info exists logFileTimes] } {
    if {$DEBUG} {puts "No matching log files."}
    if {$socketID != "NONE"} { puts $socketID "No matching log files." }
    return error
  }
  set sLogFileTimes [lsort -decreasing $logFileTimes]
  set eventTime [clock scan $timestamp -gmt true]
  # The first file we find with a time >= to ours should have our packets.
  foreach logFileTime $sLogFileTimes {
    if { $eventTime >= $logFileTime } {
      set logFileName "snort.log.$logFileTime"
      break
    }
  }
  if { ![info exists logFileName] } {
    return error
  }
  if {$DEBUG} { puts "Creating unique data file on $sensor." } 
  if {$socketID != "NONE"} { puts $socketID "Creating unique data file on $sensor." }
  set tcpdumpFilter "host $srcIP and host $dstIP and port $srcPort and port $dstPort"
  eval exec $SSH $sensor $TCPDUMP -r $REMOTE_LOG_DIR/$date/$logFileName -w /tmp/$rawDataFileName $tcpdumpFilter

  if {$DEBUG} { puts "Copying the file from $sensor." }
  if {$socketID != "NONE"} { puts $socketID "Copying the file from $sensor." }
  eval exec $SCP root@$sensor:/tmp/$rawDataFileName $sensorDir
  if {$DEBUG} { puts "Removing file from $sensor." }
  if {$socketID != "NONE"} { puts $socketID "Removing file from $sensor." }
  eval exec $SSH $sensor rm -f /tmp/$rawDataFileName
  return $sensorDir/$rawDataFileName
}

proc GetHostbyAddr { ip } {
    if [catch {host_info official_name $ip} hostname] {
    set hostname "Unknown"
  }
  return $hostname
}

proc TcpFlowFormat { srcIP srcPort dstIP dstPort } {
  set tmpSrcIP [split $srcIP .]
  set tmpDstIP [split $dstIP .]
  set tmpData [eval format "%03i.%03i.%03i.%03i.%05i-%03i.%03i.%03i.%03i.%05i" $tmpSrcIP $srcPort $tmpDstIP $dstPort]
  return $tmpData
}
proc EtherealRequest { socketID sensor eventID timestamp srcIP srcPort dstIP dstPort force } {
  global DEBUG LOCAL_LOG_DIR REMOTE_LOG_DIR LOCALSENSOR
  set date [lindex $timestamp 0]
  # Check to make sure our dirs exists. We use <rootdir>/date/sensorName/*.raw
  set dateDir "$LOCAL_LOG_DIR/$date"
  if { ! [file exists $dateDir] } {
    file mkdir $dateDir
  }
  set sensorDir "$dateDir/$sensor"
  if { ![file exists $sensorDir] } {
    file mkdir $sensorDir
  }
  # We always make the highest port the apparent source. This way we don't store
  # two copies of the same raw data.
  if { $srcPort > $dstPort } {
    set rawDataFileName "${srcIP}:${srcPort}_${dstIP}:${dstPort}.raw"
  } else {
    set rawDataFileName "${dstIP}:${dstPort}_${srcIP}:${srcPort}.raw"
  }
  if { ! [file exists $sensorDir/$rawDataFileName] || $force } {
    if {$LOCALSENSOR} {
      set rawDataFile [GetRawDataFromLocal $timestamp $srcIP $srcPort $dstIP $dstPort $sensorDir $rawDataFileName]
    } else {
set rawDataFile [GetRawDataFromSensor $sensor $timestamp $srcIP $srcPort $dstIP $dstPort $sensorDir $rawDataFileName]
    }
  } else {
    set rawDataFile $sensorDir/$rawDataFileName
  }
  if {$rawDataFile == "error" } {
    puts $socketID "ErrorMessage \{Error getting raw data from sensor.\}"
    close $socketID
    return
  }
  # Send client the raw data file to load into ethereal
  set rawFileID [open $rawDataFile r]
  fconfigure $rawFileID -translation binary
  fconfigure $socketID -translation binary
  if { [catch {fcopy $rawFileID $socketID -command [list CopyDone $rawFileID $socketID]} fCopyError] } {
    if {$DEBUG} {puts "Error: $fCopyError"}
  }
  #close $rawFileID
  #catch { close $socketID} closeError
  if {$DEBUG} {puts "$socketID closed."}
}
proc CopyDone { rawFileID socketID bytes {error {}} } {
  global DEBUG
  close $rawFileID
  close $socketID
  if {$DEBUG} {puts "Bytes copied: $bytes"}
}
proc XscriptRequest { socketID sensor eventID timestamp srcIP srcPort dstIP dstPort force } {
  global TCPFLOW DEBUG LOCAL_LOG_DIR REMOTE_LOG_DIR LOCALSENSOR
  set date [lindex $timestamp 0]
  # Check to make sure our dirs exists. We use <rootdir>/date/sensorName/*.raw
  set dateDir "$LOCAL_LOG_DIR/$date"
  if { ! [file exists $dateDir] } {
    file mkdir $dateDir
  }
  set sensorDir "$dateDir/$sensor"
  if { ![file exists $sensorDir] } {
    file mkdir $sensorDir
  }
  # We always make the highest port the apparent source. This way we don't store
  # two copies of the same raw data.
  if { $srcPort > $dstPort } {
    set rawDataFileName "${srcIP}:${srcPort}_${dstIP}:${dstPort}.raw"
  } else {
    set rawDataFileName "${dstIP}:${dstPort}_${srcIP}:${srcPort}.raw"
  }
  if { ! [file exists $sensorDir/$rawDataFileName] || $force } {
    if {$LOCALSENSOR} {
      set rawDataFile [GetRawDataFromLocal $timestamp $srcIP $srcPort $dstIP $dstPort $sensorDir $rawDataFileName $socketID]
    } else {
      set rawDataFile [GetRawDataFromSensor $sensor $timestamp $srcIP $srcPort $dstIP $dstPort $sensorDir $rawDataFileName $socketID]
    }
  } else {
    puts $socketID "DEBUG"
    puts $socketID "Using archived data: $sensorDir/$rawDataFileName"
    set rawDataFile $sensorDir/$rawDataFileName
  }
  if {$rawDataFile == "error" } {
    puts $socketID "ERROR"
    puts $socketID "Error getting raw data from sensor."
    close $socketID
    return
  }
  set NODATAFLAG 1
  # We don't have a really good way for make xscripts yet and are unable
  # to figure out the true src. So we assume the low port was the server
  # port.
  if { $srcPort < $dstPort } {
    set tmpSrcIP $dstIP
    set tmpSrcPort $dstPort
    set dstIP $srcIP
    set dstPort $srcPort
    set srcIP $tmpSrcIP
    set srcPort $tmpSrcPort
  }
  set srcMask [TcpFlowFormat $srcIP $srcPort $dstIP $dstPort]
  set dstMask [TcpFlowFormat $dstIP $dstPort $srcIP $srcPort]

  puts $socketID "HDR"
  puts $socketID "Sensor Name:\t$sensor"
  puts $socketID "Timestamp:\t$timestamp"
  puts $socketID "Connection ID:\t$eventID"
  puts $socketID "Src IP:\t\t$srcIP\t([GetHostbyAddr $srcIP])"
  puts $socketID "Dst IP:\t\t$dstIP\t([GetHostbyAddr $dstIP])"
  puts $socketID "Src Port:\t$srcPort"
  puts $socketID "Dst Port:\t$dstPort"
  puts $socketID "================================================================================="
  set tcpflowID [open "| $TCPFLOW -r $rawDataFile"]
  set state SRC
  while { [gets $tcpflowID data] >= 0 } {
    set NODATAFLAG 0
    if { [regsub ^$srcMask:\  $data {} data] > 0 } {
      set state SRC
    } elseif { [regsub ^$dstMask:\  $data {} data] > 0 } {
      set state DST
    }
    if {$DEBUG} { puts "Sending Client $socketID: $state" }
    puts $socketID "$state"
    if {$DEBUG} { puts "Sending Client $socketID: $data" }
    puts $socketID "$data"
  }
  close $tcpflowID
  if {$NODATAFLAG} {
    puts $socketID "No Data Sent."
  }
  puts $socketID "DONE"
  close $socketID
}
proc ClientConnect { socketID IPAddr port } {
  global DEBUG
  if {$DEBUG} { puts "Client Connect: $IPAddr $port $socketID" }
  fconfigure $socketID -buffering line
  fileevent $socketID readable [list ClientCmdRcvd $socketID]
}
proc ClientCmdRcvd { socketID } {
  global DEBUG
  if { [eof $socketID] || [catch {gets $socketID data}] } {
    close $socketID
    if {$DEBUG} {puts "Socket $socketID closed."}
  } else {
    if {$DEBUG} {puts "Client Command: $data"}
    set clientCmd [lindex $data 0]
    switch -exact $clientCmd {
      XscriptRequest { eval $clientCmd $socketID [lrange $data 1 end] }
      EtherealRequest { eval $clientCmd $socketID [lrange $data 1 end] }
      default { puts "Unrecognized command from $socketID: $data" }
    }
  }
}
#################### MAIN #######################

set serverSocket [socket -server ClientConnect $SERVERPORT]
puts "Listening for xscript requests..."
vwait FOREVERBABY

