input {

  file {
    type => "Sguil_httplog"
    path => "/var/log/suricata/sguil_http.log"
  }

  file {
    type => "Sguil_ssn"
    start_position => beginning
    path => "/nsm/fin-int/sancp/stats.*"
  }

  file {
    type => "Sguil_ssn"
    start_position => beginning
    path => "/nsm/fin-ext/sancp/stats.*"
  }

  #tcp {
  #
  #  type => "Sguil_flow"
  #  mode => "server"
  #  host => "127.0.0.1"
  #  port => "3333"
  #  data_timeout => "-1"
  #  
  #}

}

filter {

  if [message] =~ /^#/ {

    drop {  }

  } else {  

    # Sguil_httplog ######################
    # customformat: "%{%D-%H:%M:%S}t.%z|net_name|%a|%p|%A|%P|%{X-Forwarded-For}i|%m|%h|%u|%{referer}i|%{User-agent}i|%{Accept-Language}i|%s"
    if [type] == "Sguil_httplog" {

        grok { 

          match => [ "message", "(?<ts>(.*?))\|(?<net_name>(.*?))\|(?<src_ip>(.*?))\|(?<src_port>(.*?))\|(?<dst_ip>(.*?))\|(?<dst_port>(.*?))\|(?<x-fwd-for>(.*?))\|(?<http_method>(.*?))\|(?<http_host>(.*?))\|(?<uri>(.*?))\|(?<http_referrer>(.*?))\|(?<http_user_agent>(.*?))\|(?<http_accept_language>(.*?))\|(?<http_status>(.*))" ]

        }

        mutate { add_field => { "vendor" => "suricata" } }
        mutate { replace => { "host" => "fin-int" } }

    }

    if [type] == "Sguil_ssn" {

        mutate { remove_field => [ "host" ] }

        grok { 

          # sensor|net_name|%stm|%etm|%dur|%pro|%sip|%spt|%dip|%dpt|%spk|%dpk|%sby|%dby|%sfl|%dfl
          match => [ "message", "(?<host>(.*?))\|(?<net_name>(.*?))\|(?<start_time>(.*?))\|(?<end_time>(.*?))\|(?<duration>(.*?))\|(?<ip_proto>(.*?))\|(?<src_ip>(.*?))\|(?<src_port>(.*?))\|(?<dst_ip>(.*?))\|(?<dst_port>(.*?))\|(?<src_pkts>(.*?))\|(?<dst_pkts>(.*?))\|(?<src_bytes>(.*?))\|(?<dst_bytes>(.*?))\|(?<src_flags>(.*?))\|(?<dst_flags>(.*))" ]

        }

        date {
            match => [ "start_time", "yyyy-MM-dd HH:mm:ss" ]
        }

        # Remove ts as redundant
        mutate {
            remove_field => [ "ts", "path" ]
            add_field => { "vendor" => "cxtracker" }
        }


    }

  }

}

output {
  #elasticsearch { embedded => true }
  stdout { codec => rubydebug }
  redis { host => "192.168.8.10" data_type => "list" key => "logstash" }
}
